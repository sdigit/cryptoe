C:

C1: Improve primitives
C1.1: HKDF
C1.1.1: Use HKDF for reseed (prk = x bytes from DRBG, salt = x bytes from OS DRBG, info = TBD)
C1.1.2: Use HKDF for output from generate
C1.2: HMAC
C1.2: OS Entropy: add OS-ENT gathering code
C1.2.1: Sources
C1.2.1.1: clock ticks
C1.2.1.2: current monotonic clock
C1.2.1.3: number of processes
C1.2.1.4: hostname
C1.2.1.5: IP address(es)
C1.2.1.6: more (anything with a high enough min-entropy to be worth it)

* Go through SHAd256 C code and rename things like BLOCK_SIZE/DIGEST_SIZE to remove ambiguity
* Implement a wrapper around any given hash function (as long as it can know block and digest size) to apply the zero block and doubling as per SHAd256
* Use this on Whirlpool
* Add SHAd384, SHAd512
* Use HKDF-Extract and HKDF-Expand for all (C-based) RNG outputs
* HKDF-Extract([salt],[prk])
* Hardcoded salt (can be overridden) of size [block len]-1
* HKDF-Expand([prk],[info])
* Info shall depend on the call: similar to existing ADATA code but using the OS-ENT source

* Replace timespecs, uids/gids/pids in adata with OS-ENT data
* HMAC the OS-ENT data and truncate if smaller input is needed

Python:

P1: KeyDB refactoring
P1.1: Have the DB initialization also derive a seed value for IVs, and store IVs used in encrypted form
P1.2: Now that the basic key database works, extend it to store cipher metadata (bytes encrypted with a key, times a key has been used)


P3: Cipher support:
P3.1: Add interface for data encryption, namely files and arbitrary strings.
P3.2: Start with (Cipher)-CBC and/or (Cipher)-CTR for confidentiality with HMAC-SHAd256 for authentication
P3.3: Once that works, add GCM (and once GCM is tested, use GCM by default)

P4: KMS API:
P4.1 Add a default expiration to the database keys table
P4.2 Create a class for requesting a key from the keystore
